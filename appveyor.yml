# See http://www.appveyor.com/docs/appveyor-yml for many more options
before_build:
 nuget restore

before_test:
- ps: |
    $ErrorActionPreference = 'Stop';
    $sqlServerUrl = "$($env:downloadUrl)/SQLServer2016-x64-ENU.exe"
    $sqlServerUrlBox = "$($env:downloadUrl)/SQLServer2016-x64-ENU.box"
    # instance name express to be able to switch easy between express and eval
    $sqlServerSilentArgs = "/IACCEPTSQLSERVERLICENSETERMS /Q /ACTION=install /INSTANCEID=SQLEXPRESS /INSTANCENAME=SQLEXPRESS /UPDATEENABLED=FALSE /FEATURES=SQLEngine /SQLSYSADMINACCOUNTS=`"BUILTIN\Administrators`""
    $tempDir = Join-Path (Get-Item $env:TEMP).FullName "sql2016Eval"
    if ((Test-Path $tempDir) -eq $false) { New-Item -ItemType Directory -Path $tempDir}
    $fileFullPath = "$tempDir\SQLServer.exe"
    $fileFullPathBox = "$tempDir\SQLServer.box"
    Write-Host "Downloading SQL Server..." (Get-Date).DateTime
    (New-Object Net.WebClient).DownloadFile($sqlServerUrl , $fileFullPath)
    (New-Object Net.WebClient).DownloadFile($sqlServerUrlBox , $fileFullPathBox)
    Write-Host "Extracting SQL Server..." (Get-Date).DateTime
    $extractPath = "$tempDir\SQLEXPR"
    Start-Process "$fileFullPath" "/Q /x:`"$extractPath`"" -Wait
    Write-Host "Installing SQL Server..." (Get-Date).DateTime
    $setupPath = "$extractPath\setup.exe"
    Start-Process $setupPath "$sqlServerSilentArgs" -Wait
    Write-Host "SQL Server Installation completed" (Get-Date).DateTime
    # downloading and installing Power BI Report Server
    $pbiServerUrl = $env:pbirsDownloadUrl
    $pbiServerTempDir = Join-Path (Get-Item $env:TEMP).FullName "PBIServer"
    if ((Test-Path $pbiServerTempDir) -eq $false) { New-Item -ItemType Directory -Path $pbiServerTempDir }
    $pbiServerFileFullPath = "$pbiServerTempDir\PowerBIReportServer.exe"
    $pbiServerSilentArgs = "/Q /NORESTART IACCEPTLICENSETERMS=true"
    try {
        Write-Host "Downloading Power BI Report Server..." (Get-Date).DateTime
        (New-Object Net.WebClient).DownloadFile($pbiServerUrl , $pbiServerFileFullPath)

        Write-Host "Installing Power BI Report Server..." (Get-Date).DateTime
        Start-Process $pbiServerFileFullPath "$pbiServerSilentArgs" -Wait

        Write-Host "Power BI Report Server Installation completed" (Get-Date).DateTime
    } catch {
        Write-Error "Exception occurred while downloading Power BI Report Server: $_.Exception.Message"
        throw
    }
    # creating a PowerShell profile
    if (!(Test-Path $profile)) {
        New-Item -Path $profile -ItemType File -Force
    }
    # downloading Reporting Services Tools
    Write-Host "Downloading Reporting Services tools..." (Get-Date).DateTime
    Invoke-Expression (Invoke-WebRequest https://aka.ms/rstools)
    # configuring Power BI Report Server Database
    Write-Host "Configuring Report Server database..." (Get-Date).DateTime
    Set-RsDatabase -ReportServerInstance PBIRS -ReportServerVersion SQLServer2017 -DatabaseServerName SQLEXPRESS -DatabaseName ReportServer -DatabaseCredentialType ServiceAccount
    # configuring Power BI Report Server URLs
    Write-Host "Configuring Report Server URL for Server..." (Get-Date).DateTime
    $rsConfigObject = New-RsConfigurationSettingObject -ReportServerInstance PBIRS -ReportServerVersion SQLServer2017
    $rsConfigObject.SetVirtualDirectory('ReportServerWebService', 'ReportServer', 1033)
    $rsConfigObject.ReserveUrl('ReportServerWebService', 'http://+:80', 1033)
    Write-Host "Configuring Report Server URL for Portal..." (Get-Date).DateTime
    $rsConfigObject.SetVirtualDirectory('ReportServerWebApp', 'Reports', 1033)
    $rsConfigObject.ReserveUrl('ReportServerWebApp', 'http://+:80', 1033)
    # restarting Power BI Report Server
    Write-Host "Restarting Power BI Report Server Service..."(Get-Date).DateTime
    Stop-Service PowerBIReportServer
    Start-Service PowerBIReportServer
    Write-Host "Power BI Report Server configured successfully..."(Get-Date).DateTime

test_script:
 TestForCI.cmd